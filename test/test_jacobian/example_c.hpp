/* This file was automatically generated by CasADi 3.6.7.
 *  It consists of:
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
#ifdef __cplusplus
extern "C" {
#endif

/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
#define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
#define _CASADI_NAMESPACE_CONCAT(NS, ID) NS##ID
#define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
#define CASADI_PREFIX(ID) gen_jac_##ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_c0 CASADI_PREFIX(c0)
#define casadi_clear CASADI_PREFIX(clear)
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_s3 CASADI_PREFIX(s3)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define CASADI_SYMBOL_EXPORT
#else
#define CASADI_SYMBOL_EXPORT __declspec(dllexport)
#endif
#elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define CASADI_SYMBOL_EXPORT __attribute__((visibility("default")))
#else
#define CASADI_SYMBOL_EXPORT
#endif
#endif

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i = 0; i < n; ++i) *y++ = *x++;
    } else {
      for (i = 0; i < n; ++i) *y++ = 0.;
    }
  }
}

void casadi_clear(casadi_real* x, casadi_int n) {
  casadi_int i;
  if (x) {
    for (i = 0; i < n; ++i) *x++ = 0;
  }
}

static const casadi_int casadi_s0[7] = {3, 1, 0, 3, 0, 1, 2};
static const casadi_int casadi_s1[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s2[15] = {3, 3, 0, 3, 6, 9, 0, 1,
                                         2, 0, 1, 2, 0, 1, 2};
static const casadi_int casadi_s3[11] = {3, 2, 0, 3, 6, 0, 1, 2, 0, 1, 2};

static const casadi_real casadi_c0[9] = {1., 0., 0., 0., 1., 0., 0., 0., 1.};

/* jf:(i0[3],i1[2])->(o0[3x3],o1[3x2]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw,
                     casadi_real* w, int mem) {
  casadi_int i, j, k;
  casadi_real *rr, *ss, *tt;
  const casadi_real *cr, *cs;
  casadi_real *w0 = w + 3, w1, *w2 = w + 13, *w3 = w + 22, w4, *w5 = w + 25, w6,
              w7, *w8 = w + 30, *w9 = w + 39, w10, w11, w12, w13, *w14 = w + 52,
              *w15 = w + 55, *w16 = w + 58, *w17 = w + 67, w18, *w19 = w + 77,
              w20, *w21 = w + 87, *w22 = w + 96, *w23 = w + 102, *w24 = w + 108,
              *w25 = w + 114;
  /* #0: @0 =
  [[1, 0, 0],
   [0, 1, 0],
   [0, 0, 1]] */
  casadi_copy(casadi_c0, 9, w0);
  /* #1: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #2: @2 = zeros(3x3) */
  casadi_clear(w2, 9);
  /* #3: @3 = input[1][0] */
  casadi_copy(arg[1], 2, w3);
  /* #4: @4 = @3[0] */
  for (rr = (&w4), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #5: @5 = input[0][0] */
  casadi_copy(arg[0], 3, w5);
  /* #6: @6 = @5[2] */
  for (rr = (&w6), ss = w5 + 2; ss != w5 + 3; ss += 1) *rr++ = *ss;
  /* #7: @7 = sin(@6) */
  w7 = sin(w6);
  /* #8: @7 = (@4*@7) */
  w7 = (w4 * w7);
  /* #9: @7 = (-@7) */
  w7 = (-w7);
  /* #10: (@2[6] = @7) */
  for (rr = w2 + 6, ss = (&w7); rr != w2 + 7; rr += 1) *rr = *ss++;
  /* #11: @7 = cos(@6) */
  w7 = cos(w6);
  /* #12: @4 = (@4*@7) */
  w4 *= w7;
  /* #13: (@2[7] = @4) */
  for (rr = w2 + 7, ss = (&w4); rr != w2 + 8; rr += 1) *rr = *ss++;
  /* #14: @2 = (@1*@2) */
  for (i = 0, rr = w2, cs = w2; i < 9; ++i) (*rr++) = (w1 * (*cs++));
  /* #15: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #16: @8 = zeros(3x3) */
  casadi_clear(w8, 9);
  /* #17: @9 = zeros(3x3) */
  casadi_clear(w9, 9);
  /* #18: @4 = @3[0] */
  for (rr = (&w4), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #19: @7 = 0.05 */
  w7 = 5.0000000000000003e-02;
  /* #20: @10 = @3[0] */
  for (rr = (&w10), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #21: @11 = @5[2] */
  for (rr = (&w11), ss = w5 + 2; ss != w5 + 3; ss += 1) *rr++ = *ss;
  /* #22: @11 = cos(@11) */
  w11 = cos(w11);
  /* #23: @10 = (@10*@11) */
  w10 *= w11;
  /* #24: @11 = @3[0] */
  for (rr = (&w11), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #25: @12 = @5[2] */
  for (rr = (&w12), ss = w5 + 2; ss != w5 + 3; ss += 1) *rr++ = *ss;
  /* #26: @12 = sin(@12) */
  w12 = sin(w12);
  /* #27: @11 = (@11*@12) */
  w11 *= w12;
  /* #28: @12 = @3[0] */
  for (rr = (&w12), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #29: @13 = 2.4 */
  w13 = 2.3999999999999999e+00;
  /* #30: @12 = (@12/@13) */
  w12 /= w13;
  /* #31: @13 = @3[1] */
  for (rr = (&w13), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #32: @13 = tan(@13) */
  w13 = tan(w13);
  /* #33: @12 = (@12*@13) */
  w12 *= w13;
  /* #34: @14 = vertcat(@10, @11, @12) */
  rr = w14;
  *rr++ = w10;
  *rr++ = w11;
  *rr++ = w12;
  /* #35: @15 = (@7*@14) */
  for (i = 0, rr = w15, cs = w14; i < 3; ++i) (*rr++) = (w7 * (*cs++));
  /* #36: @15 = (@5+@15) */
  for (i = 0, rr = w15, cr = w5, cs = w15; i < 3; ++i)
    (*rr++) = ((*cr++) + (*cs++));
  /* #37: @7 = @15[2] */
  for (rr = (&w7), ss = w15 + 2; ss != w15 + 3; ss += 1) *rr++ = *ss;
  /* #38: @10 = sin(@7) */
  w10 = sin(w7);
  /* #39: @10 = (@4*@10) */
  w10 = (w4 * w10);
  /* #40: @10 = (-@10) */
  w10 = (-w10);
  /* #41: (@9[6] = @10) */
  for (rr = w9 + 6, ss = (&w10); rr != w9 + 7; rr += 1) *rr = *ss++;
  /* #42: @10 = cos(@7) */
  w10 = cos(w7);
  /* #43: @4 = (@4*@10) */
  w4 *= w10;
  /* #44: (@9[7] = @4) */
  for (rr = w9 + 7, ss = (&w4); rr != w9 + 8; rr += 1) *rr = *ss++;
  /* #45: @16 =
  [[1, 0, 0],
   [0, 1, 0],
   [0, 0, 1]] */
  casadi_copy(casadi_c0, 9, w16);
  /* #46: @4 = 0.5 */
  w4 = 5.0000000000000000e-01;
  /* #47: @17 = (@4*@2) */
  for (i = 0, rr = w17, cs = w2; i < 9; ++i) (*rr++) = (w4 * (*cs++));
  /* #48: @16 = (@16+@17) */
  for (i = 0, rr = w16, cs = w17; i < 9; ++i) (*rr++) += (*cs++);
  /* #49: @8 = mac(@9,@16,@8) */
  for (i = 0, rr = w8; i < 3; ++i)
    for (j = 0; j < 3; ++j, ++rr)
      for (k = 0, ss = w9 + j, tt = w16 + i * 3; k < 3; ++k)
        *rr += ss[k * 3] * *tt++;
  /* #50: @8 = (@1*@8) */
  for (i = 0, rr = w8, cs = w8; i < 9; ++i) (*rr++) = (w1 * (*cs++));
  /* #51: @16 = (2.*@8) */
  for (i = 0, rr = w16, cs = w8; i < 9; ++i) *rr++ = (2. * *cs++);
  /* #52: @2 = (@2+@16) */
  for (i = 0, rr = w2, cs = w16; i < 9; ++i) (*rr++) += (*cs++);
  /* #53: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #54: @16 = zeros(3x3) */
  casadi_clear(w16, 9);
  /* #55: @17 = zeros(3x3) */
  casadi_clear(w17, 9);
  /* #56: @4 = @3[0] */
  for (rr = (&w4), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #57: @10 = 0.05 */
  w10 = 5.0000000000000003e-02;
  /* #58: @11 = @3[0] */
  for (rr = (&w11), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #59: @12 = 0.05 */
  w12 = 5.0000000000000003e-02;
  /* #60: @14 = (@12*@14) */
  for (i = 0, rr = w14, cs = w14; i < 3; ++i) (*rr++) = (w12 * (*cs++));
  /* #61: @14 = (@5+@14) */
  for (i = 0, rr = w14, cr = w5, cs = w14; i < 3; ++i)
    (*rr++) = ((*cr++) + (*cs++));
  /* #62: @12 = @14[2] */
  for (rr = (&w12), ss = w14 + 2; ss != w14 + 3; ss += 1) *rr++ = *ss;
  /* #63: @12 = cos(@12) */
  w12 = cos(w12);
  /* #64: @11 = (@11*@12) */
  w11 *= w12;
  /* #65: @12 = @3[0] */
  for (rr = (&w12), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #66: @13 = @14[2] */
  for (rr = (&w13), ss = w14 + 2; ss != w14 + 3; ss += 1) *rr++ = *ss;
  /* #67: @13 = sin(@13) */
  w13 = sin(w13);
  /* #68: @12 = (@12*@13) */
  w12 *= w13;
  /* #69: @13 = @3[0] */
  for (rr = (&w13), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #70: @18 = 2.4 */
  w18 = 2.3999999999999999e+00;
  /* #71: @13 = (@13/@18) */
  w13 /= w18;
  /* #72: @18 = @3[1] */
  for (rr = (&w18), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #73: @18 = tan(@18) */
  w18 = tan(w18);
  /* #74: @13 = (@13*@18) */
  w13 *= w18;
  /* #75: @14 = vertcat(@11, @12, @13) */
  rr = w14;
  *rr++ = w11;
  *rr++ = w12;
  *rr++ = w13;
  /* #76: @15 = (@10*@14) */
  for (i = 0, rr = w15, cs = w14; i < 3; ++i) (*rr++) = (w10 * (*cs++));
  /* #77: @15 = (@5+@15) */
  for (i = 0, rr = w15, cr = w5, cs = w15; i < 3; ++i)
    (*rr++) = ((*cr++) + (*cs++));
  /* #78: @10 = @15[2] */
  for (rr = (&w10), ss = w15 + 2; ss != w15 + 3; ss += 1) *rr++ = *ss;
  /* #79: @11 = sin(@10) */
  w11 = sin(w10);
  /* #80: @11 = (@4*@11) */
  w11 = (w4 * w11);
  /* #81: @11 = (-@11) */
  w11 = (-w11);
  /* #82: (@17[6] = @11) */
  for (rr = w17 + 6, ss = (&w11); rr != w17 + 7; rr += 1) *rr = *ss++;
  /* #83: @11 = cos(@10) */
  w11 = cos(w10);
  /* #84: @4 = (@4*@11) */
  w4 *= w11;
  /* #85: (@17[7] = @4) */
  for (rr = w17 + 7, ss = (&w4); rr != w17 + 8; rr += 1) *rr = *ss++;
  /* #86: @19 =
  [[1, 0, 0],
   [0, 1, 0],
   [0, 0, 1]] */
  casadi_copy(casadi_c0, 9, w19);
  /* #87: @4 = 0.5 */
  w4 = 5.0000000000000000e-01;
  /* #88: @8 = (@4*@8) */
  for (i = 0, rr = w8, cs = w8; i < 9; ++i) (*rr++) = (w4 * (*cs++));
  /* #89: @19 = (@19+@8) */
  for (i = 0, rr = w19, cs = w8; i < 9; ++i) (*rr++) += (*cs++);
  /* #90: @16 = mac(@17,@19,@16) */
  for (i = 0, rr = w16; i < 3; ++i)
    for (j = 0; j < 3; ++j, ++rr)
      for (k = 0, ss = w17 + j, tt = w19 + i * 3; k < 3; ++k)
        *rr += ss[k * 3] * *tt++;
  /* #91: @16 = (@1*@16) */
  for (i = 0, rr = w16, cs = w16; i < 9; ++i) (*rr++) = (w1 * (*cs++));
  /* #92: @19 = (2.*@16) */
  for (i = 0, rr = w19, cs = w16; i < 9; ++i) *rr++ = (2. * *cs++);
  /* #93: @2 = (@2+@19) */
  for (i = 0, rr = w2, cs = w19; i < 9; ++i) (*rr++) += (*cs++);
  /* #94: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #95: @19 = zeros(3x3) */
  casadi_clear(w19, 9);
  /* #96: @8 = zeros(3x3) */
  casadi_clear(w8, 9);
  /* #97: @4 = @3[0] */
  for (rr = (&w4), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #98: @11 = 0.1 */
  w11 = 1.0000000000000001e-01;
  /* #99: @12 = @3[0] */
  for (rr = (&w12), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #100: @13 = 0.05 */
  w13 = 5.0000000000000003e-02;
  /* #101: @14 = (@13*@14) */
  for (i = 0, rr = w14, cs = w14; i < 3; ++i) (*rr++) = (w13 * (*cs++));
  /* #102: @14 = (@5+@14) */
  for (i = 0, rr = w14, cr = w5, cs = w14; i < 3; ++i)
    (*rr++) = ((*cr++) + (*cs++));
  /* #103: @13 = @14[2] */
  for (rr = (&w13), ss = w14 + 2; ss != w14 + 3; ss += 1) *rr++ = *ss;
  /* #104: @13 = cos(@13) */
  w13 = cos(w13);
  /* #105: @12 = (@12*@13) */
  w12 *= w13;
  /* #106: @13 = @3[0] */
  for (rr = (&w13), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #107: @18 = @14[2] */
  for (rr = (&w18), ss = w14 + 2; ss != w14 + 3; ss += 1) *rr++ = *ss;
  /* #108: @18 = sin(@18) */
  w18 = sin(w18);
  /* #109: @13 = (@13*@18) */
  w13 *= w18;
  /* #110: @18 = @3[0] */
  for (rr = (&w18), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #111: @20 = 2.4 */
  w20 = 2.3999999999999999e+00;
  /* #112: @18 = (@18/@20) */
  w18 /= w20;
  /* #113: @20 = @3[1] */
  for (rr = (&w20), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #114: @20 = tan(@20) */
  w20 = tan(w20);
  /* #115: @18 = (@18*@20) */
  w18 *= w20;
  /* #116: @14 = vertcat(@12, @13, @18) */
  rr = w14;
  *rr++ = w12;
  *rr++ = w13;
  *rr++ = w18;
  /* #117: @14 = (@11*@14) */
  for (i = 0, rr = w14, cs = w14; i < 3; ++i) (*rr++) = (w11 * (*cs++));
  /* #118: @5 = (@5+@14) */
  for (i = 0, rr = w5, cs = w14; i < 3; ++i) (*rr++) += (*cs++);
  /* #119: @11 = @5[2] */
  for (rr = (&w11), ss = w5 + 2; ss != w5 + 3; ss += 1) *rr++ = *ss;
  /* #120: @12 = sin(@11) */
  w12 = sin(w11);
  /* #121: @12 = (@4*@12) */
  w12 = (w4 * w12);
  /* #122: @12 = (-@12) */
  w12 = (-w12);
  /* #123: (@8[6] = @12) */
  for (rr = w8 + 6, ss = (&w12); rr != w8 + 7; rr += 1) *rr = *ss++;
  /* #124: @12 = cos(@11) */
  w12 = cos(w11);
  /* #125: @4 = (@4*@12) */
  w4 *= w12;
  /* #126: (@8[7] = @4) */
  for (rr = w8 + 7, ss = (&w4); rr != w8 + 8; rr += 1) *rr = *ss++;
  /* #127: @21 =
  [[1, 0, 0],
   [0, 1, 0],
   [0, 0, 1]] */
  casadi_copy(casadi_c0, 9, w21);
  /* #128: @21 = (@21+@16) */
  for (i = 0, rr = w21, cs = w16; i < 9; ++i) (*rr++) += (*cs++);
  /* #129: @19 = mac(@8,@21,@19) */
  for (i = 0, rr = w19; i < 3; ++i)
    for (j = 0; j < 3; ++j, ++rr)
      for (k = 0, ss = w8 + j, tt = w21 + i * 3; k < 3; ++k)
        *rr += ss[k * 3] * *tt++;
  /* #130: @19 = (@1*@19) */
  for (i = 0, rr = w19, cs = w19; i < 9; ++i) (*rr++) = (w1 * (*cs++));
  /* #131: @2 = (@2+@19) */
  for (i = 0, rr = w2, cs = w19; i < 9; ++i) (*rr++) += (*cs++);
  /* #132: @1 = 6 */
  w1 = 6.;
  /* #133: @2 = (@2/@1) */
  for (i = 0, rr = w2; i < 9; ++i) (*rr++) /= w1;
  /* #134: @0 = (@0+@2) */
  for (i = 0, rr = w0, cs = w2; i < 9; ++i) (*rr++) += (*cs++);
  /* #135: output[0][0] = @0 */
  casadi_copy(w0, 9, res[0]);
  /* #136: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #137: @22 = zeros(3x2) */
  casadi_clear(w22, 6);
  /* #138: @4 = cos(@6) */
  w4 = cos(w6);
  /* #139: (@22[0] = @4) */
  for (rr = w22 + 0, ss = (&w4); rr != w22 + 1; rr += 1) *rr = *ss++;
  /* #140: @6 = sin(@6) */
  w6 = sin(w6);
  /* #141: (@22[1] = @6) */
  for (rr = w22 + 1, ss = (&w6); rr != w22 + 2; rr += 1) *rr = *ss++;
  /* #142: @6 = 0.416667 */
  w6 = 4.1666666666666669e-01;
  /* #143: @4 = @3[1] */
  for (rr = (&w4), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #144: @4 = tan(@4) */
  w4 = tan(w4);
  /* #145: @6 = (@6*@4) */
  w6 *= w4;
  /* #146: (@22[2] = @6) */
  for (rr = w22 + 2, ss = (&w6); rr != w22 + 3; rr += 1) *rr = *ss++;
  /* #147: @6 = @3[0] */
  for (rr = (&w6), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #148: @4 = 2.4 */
  w4 = 2.3999999999999999e+00;
  /* #149: @12 = @3[1] */
  for (rr = (&w12), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #150: @12 = cos(@12) */
  w12 = cos(w12);
  /* #151: @4 = (@4*@12) */
  w4 *= w12;
  /* #152: @12 = @3[1] */
  for (rr = (&w12), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #153: @12 = cos(@12) */
  w12 = cos(w12);
  /* #154: @4 = (@4*@12) */
  w4 *= w12;
  /* #155: @6 = (@6/@4) */
  w6 /= w4;
  /* #156: (@22[5] = @6) */
  for (rr = w22 + 5, ss = (&w6); rr != w22 + 6; rr += 1) *rr = *ss++;
  /* #157: @22 = (@1*@22) */
  for (i = 0, rr = w22, cs = w22; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #158: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #159: @23 = zeros(3x2) */
  casadi_clear(w23, 6);
  /* #160: @6 = cos(@7) */
  w6 = cos(w7);
  /* #161: (@23[0] = @6) */
  for (rr = w23 + 0, ss = (&w6); rr != w23 + 1; rr += 1) *rr = *ss++;
  /* #162: @7 = sin(@7) */
  w7 = sin(w7);
  /* #163: (@23[1] = @7) */
  for (rr = w23 + 1, ss = (&w7); rr != w23 + 2; rr += 1) *rr = *ss++;
  /* #164: @7 = 0.416667 */
  w7 = 4.1666666666666669e-01;
  /* #165: @6 = @3[1] */
  for (rr = (&w6), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #166: @6 = tan(@6) */
  w6 = tan(w6);
  /* #167: @7 = (@7*@6) */
  w7 *= w6;
  /* #168: (@23[2] = @7) */
  for (rr = w23 + 2, ss = (&w7); rr != w23 + 3; rr += 1) *rr = *ss++;
  /* #169: @7 = @3[0] */
  for (rr = (&w7), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #170: @6 = 2.4 */
  w6 = 2.3999999999999999e+00;
  /* #171: @4 = @3[1] */
  for (rr = (&w4), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #172: @4 = cos(@4) */
  w4 = cos(w4);
  /* #173: @6 = (@6*@4) */
  w6 *= w4;
  /* #174: @4 = @3[1] */
  for (rr = (&w4), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #175: @4 = cos(@4) */
  w4 = cos(w4);
  /* #176: @6 = (@6*@4) */
  w6 *= w4;
  /* #177: @7 = (@7/@6) */
  w7 /= w6;
  /* #178: (@23[5] = @7) */
  for (rr = w23 + 5, ss = (&w7); rr != w23 + 6; rr += 1) *rr = *ss++;
  /* #179: @23 = (@1*@23) */
  for (i = 0, rr = w23, cs = w23; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #180: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #181: @7 = 0.5 */
  w7 = 5.0000000000000000e-01;
  /* #182: @24 = zeros(3x2) */
  casadi_clear(w24, 6);
  /* #183: @24 = mac(@9,@22,@24) */
  for (i = 0, rr = w24; i < 2; ++i)
    for (j = 0; j < 3; ++j, ++rr)
      for (k = 0, ss = w9 + j, tt = w22 + i * 3; k < 3; ++k)
        *rr += ss[k * 3] * *tt++;
  /* #184: @24 = (@7*@24) */
  for (i = 0, rr = w24, cs = w24; i < 6; ++i) (*rr++) = (w7 * (*cs++));
  /* #185: @24 = (@1*@24) */
  for (i = 0, rr = w24, cs = w24; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #186: @23 = (@23+@24) */
  for (i = 0, rr = w23, cs = w24; i < 6; ++i) (*rr++) += (*cs++);
  /* #187: @24 = (2.*@23) */
  for (i = 0, rr = w24, cs = w23; i < 6; ++i) *rr++ = (2. * *cs++);
  /* #188: @22 = (@22+@24) */
  for (i = 0, rr = w22, cs = w24; i < 6; ++i) (*rr++) += (*cs++);
  /* #189: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #190: @24 = zeros(3x2) */
  casadi_clear(w24, 6);
  /* #191: @7 = cos(@10) */
  w7 = cos(w10);
  /* #192: (@24[0] = @7) */
  for (rr = w24 + 0, ss = (&w7); rr != w24 + 1; rr += 1) *rr = *ss++;
  /* #193: @10 = sin(@10) */
  w10 = sin(w10);
  /* #194: (@24[1] = @10) */
  for (rr = w24 + 1, ss = (&w10); rr != w24 + 2; rr += 1) *rr = *ss++;
  /* #195: @10 = 0.416667 */
  w10 = 4.1666666666666669e-01;
  /* #196: @7 = @3[1] */
  for (rr = (&w7), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #197: @7 = tan(@7) */
  w7 = tan(w7);
  /* #198: @10 = (@10*@7) */
  w10 *= w7;
  /* #199: (@24[2] = @10) */
  for (rr = w24 + 2, ss = (&w10); rr != w24 + 3; rr += 1) *rr = *ss++;
  /* #200: @10 = @3[0] */
  for (rr = (&w10), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #201: @7 = 2.4 */
  w7 = 2.3999999999999999e+00;
  /* #202: @6 = @3[1] */
  for (rr = (&w6), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #203: @6 = cos(@6) */
  w6 = cos(w6);
  /* #204: @7 = (@7*@6) */
  w7 *= w6;
  /* #205: @6 = @3[1] */
  for (rr = (&w6), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #206: @6 = cos(@6) */
  w6 = cos(w6);
  /* #207: @7 = (@7*@6) */
  w7 *= w6;
  /* #208: @10 = (@10/@7) */
  w10 /= w7;
  /* #209: (@24[5] = @10) */
  for (rr = w24 + 5, ss = (&w10); rr != w24 + 6; rr += 1) *rr = *ss++;
  /* #210: @24 = (@1*@24) */
  for (i = 0, rr = w24, cs = w24; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #211: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #212: @10 = 0.5 */
  w10 = 5.0000000000000000e-01;
  /* #213: @25 = zeros(3x2) */
  casadi_clear(w25, 6);
  /* #214: @25 = mac(@17,@23,@25) */
  for (i = 0, rr = w25; i < 2; ++i)
    for (j = 0; j < 3; ++j, ++rr)
      for (k = 0, ss = w17 + j, tt = w23 + i * 3; k < 3; ++k)
        *rr += ss[k * 3] * *tt++;
  /* #215: @25 = (@10*@25) */
  for (i = 0, rr = w25, cs = w25; i < 6; ++i) (*rr++) = (w10 * (*cs++));
  /* #216: @25 = (@1*@25) */
  for (i = 0, rr = w25, cs = w25; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #217: @24 = (@24+@25) */
  for (i = 0, rr = w24, cs = w25; i < 6; ++i) (*rr++) += (*cs++);
  /* #218: @25 = (2.*@24) */
  for (i = 0, rr = w25, cs = w24; i < 6; ++i) *rr++ = (2. * *cs++);
  /* #219: @22 = (@22+@25) */
  for (i = 0, rr = w22, cs = w25; i < 6; ++i) (*rr++) += (*cs++);
  /* #220: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #221: @25 = zeros(3x2) */
  casadi_clear(w25, 6);
  /* #222: @10 = cos(@11) */
  w10 = cos(w11);
  /* #223: (@25[0] = @10) */
  for (rr = w25 + 0, ss = (&w10); rr != w25 + 1; rr += 1) *rr = *ss++;
  /* #224: @11 = sin(@11) */
  w11 = sin(w11);
  /* #225: (@25[1] = @11) */
  for (rr = w25 + 1, ss = (&w11); rr != w25 + 2; rr += 1) *rr = *ss++;
  /* #226: @11 = 0.416667 */
  w11 = 4.1666666666666669e-01;
  /* #227: @10 = @3[1] */
  for (rr = (&w10), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #228: @10 = tan(@10) */
  w10 = tan(w10);
  /* #229: @11 = (@11*@10) */
  w11 *= w10;
  /* #230: (@25[2] = @11) */
  for (rr = w25 + 2, ss = (&w11); rr != w25 + 3; rr += 1) *rr = *ss++;
  /* #231: @11 = @3[0] */
  for (rr = (&w11), ss = w3 + 0; ss != w3 + 1; ss += 1) *rr++ = *ss;
  /* #232: @10 = 2.4 */
  w10 = 2.3999999999999999e+00;
  /* #233: @7 = @3[1] */
  for (rr = (&w7), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #234: @7 = cos(@7) */
  w7 = cos(w7);
  /* #235: @10 = (@10*@7) */
  w10 *= w7;
  /* #236: @7 = @3[1] */
  for (rr = (&w7), ss = w3 + 1; ss != w3 + 2; ss += 1) *rr++ = *ss;
  /* #237: @7 = cos(@7) */
  w7 = cos(w7);
  /* #238: @10 = (@10*@7) */
  w10 *= w7;
  /* #239: @11 = (@11/@10) */
  w11 /= w10;
  /* #240: (@25[5] = @11) */
  for (rr = w25 + 5, ss = (&w11); rr != w25 + 6; rr += 1) *rr = *ss++;
  /* #241: @25 = (@1*@25) */
  for (i = 0, rr = w25, cs = w25; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #242: @1 = 0.1 */
  w1 = 1.0000000000000001e-01;
  /* #243: @23 = zeros(3x2) */
  casadi_clear(w23, 6);
  /* #244: @23 = mac(@8,@24,@23) */
  for (i = 0, rr = w23; i < 2; ++i)
    for (j = 0; j < 3; ++j, ++rr)
      for (k = 0, ss = w8 + j, tt = w24 + i * 3; k < 3; ++k)
        *rr += ss[k * 3] * *tt++;
  /* #245: @23 = (@1*@23) */
  for (i = 0, rr = w23, cs = w23; i < 6; ++i) (*rr++) = (w1 * (*cs++));
  /* #246: @25 = (@25+@23) */
  for (i = 0, rr = w25, cs = w23; i < 6; ++i) (*rr++) += (*cs++);
  /* #247: @22 = (@22+@25) */
  for (i = 0, rr = w22, cs = w25; i < 6; ++i) (*rr++) += (*cs++);
  /* #248: @1 = 6 */
  w1 = 6.;
  /* #249: @22 = (@22/@1) */
  for (i = 0, rr = w22; i < 6; ++i) (*rr++) /= w1;
  /* #250: output[1][0] = @22 */
  casadi_copy(w22, 6, res[1]);
  return 0;
}

CASADI_SYMBOL_EXPORT int jf(const casadi_real** arg, casadi_real** res,
                            casadi_int* iw, casadi_real* w, int mem) {
  return casadi_f0(arg, res, iw, w, mem);
}

CASADI_SYMBOL_EXPORT int jf_alloc_mem(void) { return 0; }

CASADI_SYMBOL_EXPORT int jf_init_mem(int mem) { return 0; }

CASADI_SYMBOL_EXPORT void jf_free_mem(int mem) {}

CASADI_SYMBOL_EXPORT int jf_checkout(void) { return 0; }

CASADI_SYMBOL_EXPORT void jf_release(int mem) {}

CASADI_SYMBOL_EXPORT void jf_incref(void) {}

CASADI_SYMBOL_EXPORT void jf_decref(void) {}

CASADI_SYMBOL_EXPORT casadi_int jf_n_in(void) { return 2; }

CASADI_SYMBOL_EXPORT casadi_int jf_n_out(void) { return 2; }

CASADI_SYMBOL_EXPORT casadi_real jf_default_in(casadi_int i) {
  switch (i) {
    default:
      return 0;
  }
}

CASADI_SYMBOL_EXPORT const char* jf_name_in(casadi_int i) {
  switch (i) {
    case 0:
      return "i0";
    case 1:
      return "i1";
    default:
      return 0;
  }
}

CASADI_SYMBOL_EXPORT const char* jf_name_out(casadi_int i) {
  switch (i) {
    case 0:
      return "o0";
    case 1:
      return "o1";
    default:
      return 0;
  }
}

CASADI_SYMBOL_EXPORT const casadi_int* jf_sparsity_in(casadi_int i) {
  switch (i) {
    case 0:
      return casadi_s0;
    case 1:
      return casadi_s1;
    default:
      return 0;
  }
}

CASADI_SYMBOL_EXPORT const casadi_int* jf_sparsity_out(casadi_int i) {
  switch (i) {
    case 0:
      return casadi_s2;
    case 1:
      return casadi_s3;
    default:
      return 0;
  }
}

CASADI_SYMBOL_EXPORT int jf_work(casadi_int* sz_arg, casadi_int* sz_res,
                                 casadi_int* sz_iw, casadi_int* sz_w) {
  if (sz_arg) *sz_arg = 5;
  if (sz_res) *sz_res = 3;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 120;
  return 0;
}

CASADI_SYMBOL_EXPORT int jf_work_bytes(casadi_int* sz_arg, casadi_int* sz_res,
                                       casadi_int* sz_iw, casadi_int* sz_w) {
  if (sz_arg) *sz_arg = 5 * sizeof(const casadi_real*);
  if (sz_res) *sz_res = 3 * sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0 * sizeof(casadi_int);
  if (sz_w) *sz_w = 120 * sizeof(casadi_real);
  return 0;
}

#ifdef __cplusplus
} /* extern "C" */
#endif
