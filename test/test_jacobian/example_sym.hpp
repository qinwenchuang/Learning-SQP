#include <array>
#include <cmath>

using Vector3 = std::array<double, 3>;
using Vector2 = std::array<double, 2>;
using Matrix33 = std::array<Vector3, 3>;
using Matrix32 = std::array<Vector3, 2>;

class TestSym {
 public:
  void TestJacobianSym(const Vector3& x, const Vector2& u, Matrix33& jac_x,
                       Matrix32& jac_u) {
    double u1 = u[0];
    double u2 = u[1];
    double x3 = x[2];
    jac_x[0][0] = 1.0;
    jac_x[0][2] =
        -0.0166666666666667 * u1 * sin(x3) -
        0.0666666666666667 * u1 * sin(0.0208333333333333 * u1 * tan(u2) + x3) -
        0.0166666666666667 * u1 * sin(0.0416666666666667 * u1 * tan(u2) + x3);
    jac_x[1][1] = 1.0;
    jac_x[1][2] =
        0.0166666666666667 * u1 * cos(x3) +
        0.0666666666666667 * u1 * cos(0.0208333333333333 * u1 * tan(u2) + x3) +
        0.0166666666666667 * u1 * cos(0.0416666666666667 * u1 * tan(u2) + x3);
    jac_x[2][2] = 1.0;

    jac_u[0][0] =
        -0.00138888888888889 * u1 *
            sin(0.0208333333333333 * u1 * tan(u2) + x3) * tan(u2) -
        0.000694444444444444 * u1 *
            sin(0.0416666666666667 * u1 * tan(u2) + x3) * tan(u2) +
        0.0166666666666667 * cos(x3) +
        0.0666666666666667 * cos(0.0208333333333333 * u1 * tan(u2) + x3) +
        0.0166666666666667 * cos(0.0416666666666667 * u1 * tan(u2) + x3);
    jac_u[0][1] = -0.00138888888888889 * u1 * u1 * (tan(u2) * tan(u2) + 1) *
                      sin(0.0208333333333333 * u1 * tan(u2) + x3) -
                  0.000694444444444444 * u1 * u1 * (tan(u2) * tan(u2) + 1) *
                      sin(0.0416666666666667 * u1 * tan(u2) + x3);
    jac_u[1][0] =
        0.00138888888888889 * u1 * cos(0.0208333333333333 * u1 * tan(u2) + x3) *
            tan(u2) +
        0.000694444444444444 * u1 *
            cos(0.0416666666666667 * u1 * tan(u2) + x3) * tan(u2) +
        0.0166666666666667 * sin(x3) +
        0.0666666666666667 * sin(0.0208333333333333 * u1 * tan(u2) + x3) +
        0.0166666666666667 * sin(0.0416666666666667 * u1 * tan(u2) + x3);
    jac_u[1][1] = 0.00138888888888889 * u1 * u1 * (tan(u2) * tan(u2) + 1) *
                      cos(0.0208333333333333 * u1 * tan(u2) + x3) +
                  0.000694444444444444 * u1 * u1 * (tan(u2) * tan(u2) + 1) *
                      cos(0.0416666666666667 * u1 * tan(u2) + x3);
    jac_u[2][0] = 0.0416666666666667 * tan(u2);
    jac_u[2][1] = 0.0416666666666667 * u1 * (tan(u2) * tan(u2) + 1);
  };
};